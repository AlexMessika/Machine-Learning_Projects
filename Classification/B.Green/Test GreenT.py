{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Test GreenT.py","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyMxYMrqr5TaJiTCFjJAfyu3"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"t_cYrhRJH-Yg","colab_type":"code","outputId":"3aee7ff8-ecc7-49d6-fb2a-33c5a3b5b54b","executionInfo":{"status":"ok","timestamp":1590046355135,"user_tz":-120,"elapsed":977,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_breast_cancer\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"zPjGrNmqJeqm","colab_type":"code","colab":{}},"source":["df_alimentaire = pd.read_csv(\"/content/Form-Alimentaire.csv\", encoding = \"utf-8\", delimiter = \";\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pQYweAsdJ3xC","colab_type":"code","outputId":"94f3e08b-19d4-4e88-a0b6-42c17512930b","executionInfo":{"status":"ok","timestamp":1590046734583,"user_tz":-120,"elapsed":590,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":586}},"source":["df_alimentaire.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Consommez-vous de la viande ?</th>\n","      <th>Consommez-vous des légumes ?</th>\n","      <th>Consommez-vous des fruits ?</th>\n","      <th>Consommez-vous des produits laitiers ?</th>\n","      <th>Consommez-vous du poisson ?</th>\n","      <th>Consommez-vous des desserts, sucreries etc.. ?</th>\n","      <th>Consommez-vous des aliments bio ?</th>\n","      <th>Faites-vous attention aux labels des produits que vous achetez et consommez ?</th>\n","      <th>Faites-vous attention à la provenance des produits que vous achetez et consommez ?</th>\n","      <th>Achetez-vous des fruits et légumes de saison ?</th>\n","      <th>Achetez-vous des produits frais ?</th>\n","      <th>Gaspiller vous de la nourriture ?</th>\n","      <th>A quelle fréquence mangez-vous dans des fast-food ?</th>\n","      <th>NOTE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Très rarement</td>\n","      <td>Jamais</td>\n","      <td>Très rarement</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Jamais</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Jamais</td>\n","      <td>Jamais</td>\n","      <td>Jamais</td>\n","      <td>Jamais</td>\n","      <td>Parfois</td>\n","      <td>Jamais</td>\n","      <td>Tout le temps</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Quelque fois par semaine</td>\n","      <td>Tous les jours ou presque</td>\n","      <td>Très rarement</td>\n","      <td>Tous les jours ou presque</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Très rarement</td>\n","      <td>Parfois</td>\n","      <td>Souvent</td>\n","      <td>Parfois</td>\n","      <td>Souvent</td>\n","      <td>Souvent</td>\n","      <td>Jamais</td>\n","      <td>Parfois</td>\n","      <td>1,5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Quelque fois par semaine</td>\n","      <td>Tous les jours ou presque</td>\n","      <td>Tous les jours ou presque</td>\n","      <td>Très rarement</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Très rarement</td>\n","      <td>Souvent</td>\n","      <td>Tout le temps</td>\n","      <td>Tout le temps</td>\n","      <td>Tout le temps</td>\n","      <td>Souvent</td>\n","      <td>Jamais</td>\n","      <td>Parfois</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Tous les jours ou presque</td>\n","      <td>Très rarement</td>\n","      <td>Très rarement</td>\n","      <td>Très rarement</td>\n","      <td>Jamais</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Jamais</td>\n","      <td>Parfois</td>\n","      <td>Parfois</td>\n","      <td>Parfois</td>\n","      <td>Parfois</td>\n","      <td>Parfois</td>\n","      <td>Tout le temps</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Tous les jours ou presque</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Très rarement</td>\n","      <td>Tous les jours ou presque</td>\n","      <td>Très rarement</td>\n","      <td>Quelque fois par semaine</td>\n","      <td>Parfois</td>\n","      <td>Parfois</td>\n","      <td>Tout le temps</td>\n","      <td>Souvent</td>\n","      <td>Parfois</td>\n","      <td>Jamais</td>\n","      <td>Parfois</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Consommez-vous de la viande ?  ... NOTE\n","0                 Très rarement  ...    3\n","1      Quelque fois par semaine  ...  1,5\n","2      Quelque fois par semaine  ...    1\n","3     Tous les jours ou presque  ...    3\n","4     Tous les jours ou presque  ...    2\n","\n","[5 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"JKwBjkJBKxaH","colab_type":"code","colab":{}},"source":["def convert_one(x):\n","  if x == \"Jamais\": return 1\n","  if x == \"Très rarement\": return 2\n","  if x == \"Quelque fois par semaine\": return 3\n","  if x == \"Tous les jours ou presque\": return 4\n","  else: return 0\n","  \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"729wMdf7Mw1j","colab_type":"code","colab":{}},"source":["def convert_two(x):\n","  if x == \"Jamais\": return 1\n","  if x == \"Parfois\": return 2\n","  if x == \"Souvent\": return 3\n","  if x == \"Tout le temps\": return 4\n","  else: return 0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ru3U8EVUM5f2","colab_type":"code","colab":{}},"source":["head = [\"question1\",\"question2\",\"question3\",\"question4\",\"question5\",\"question6\",\"question7\",\"question8\",\"question9\",\"question10\",\"question11\",\"question12\",\"question13\",]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2biBi8p-NZkn","colab_type":"code","colab":{}},"source":["X = pd.DataFrame(columns = head)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DjGT3sh6Onen","colab_type":"code","outputId":"2ed74460-d671-4395-b60f-18c8412cb461","executionInfo":{"status":"ok","timestamp":1590047719917,"user_tz":-120,"elapsed":440,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["X.head"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of Empty DataFrame\n","Columns: [question1, question2, question3, question4, question5, question6, question7, question8, question9, question10, question11, question12, question13]\n","Index: []>"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"FEqN4dU7Or_p","colab_type":"code","colab":{}},"source":["X[\"question1\"] = df_alimentaire[\"Consommez-vous de la viande ?\"].apply(convert_one)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"KxfKT7CaQQvF","colab_type":"code","colab":{}},"source":["X[\"question2\"] = df_alimentaire[\"Consommez-vous des légumes ? \"].apply(convert_one)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BAS8KoDPQgEY","colab_type":"code","colab":{}},"source":["X[\"question3\"] = df_alimentaire.iloc[2].apply(convert_one)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1IrUUD4nRHjk","colab_type":"code","colab":{}},"source":["X[\"question4\"] = df_alimentaire.iloc[3].apply(convert_one)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HfYnODBaRd53","colab_type":"code","colab":{}},"source":["for i in range(6):\n","  X[head[i]] = df_alimentaire.iloc[:,i].apply(convert_one)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"tvfK8Aa5RSfM","colab_type":"code","colab":{}},"source":["for i in range(6,13):\n","  X[head[i]] = df_alimentaire.iloc[:,i].apply(convert_two)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5nOj1d5PR_d6","colab_type":"code","outputId":"f2b56cfc-bfde-4040-f2c6-e353d03a23af","executionInfo":{"status":"ok","timestamp":1590048872257,"user_tz":-120,"elapsed":432,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["X.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question1</th>\n","      <th>question2</th>\n","      <th>question3</th>\n","      <th>question4</th>\n","      <th>question5</th>\n","      <th>question6</th>\n","      <th>question7</th>\n","      <th>question8</th>\n","      <th>question9</th>\n","      <th>question10</th>\n","      <th>question11</th>\n","      <th>question12</th>\n","      <th>question13</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   question1  question2  question3  ...  question11  question12  question13\n","0          2          1          2  ...           2           1           4\n","1          3          4          2  ...           3           1           2\n","2          3          4          4  ...           3           1           2\n","3          4          2          2  ...           2           2           4\n","4          4          3          2  ...           2           1           2\n","\n","[5 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"G7i62Es6SCIC","colab_type":"code","colab":{}},"source":["y = df_alimentaire[\"NOTE\"]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ed9tWC7OX3BB","colab_type":"code","colab":{}},"source":["def convert_note(x):\n","  x=x.replace(\",\",\".\")\n","  return (float(x))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8IIUJW8OYZMg","colab_type":"code","colab":{}},"source":["y = pd.DataFrame(columns=[\"NOTE\"])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oGlt5T4ZTUhJ","colab_type":"code","colab":{}},"source":["y[\"NOTE\"] = df_alimentaire[\"NOTE\"].apply(convert_note)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qRwcbb7TY0u6","colab_type":"code","outputId":"88c1d408-7445-4930-9147-b4e88b2b69a7","executionInfo":{"status":"ok","timestamp":1590050387314,"user_tz":-120,"elapsed":706,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":202}},"source":["y.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NOTE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   NOTE\n","0   3.0\n","1   1.5\n","2   1.0\n","3   3.0\n","4   2.0"]},"metadata":{"tags":[]},"execution_count":50}]},{"cell_type":"code","metadata":{"id":"OoYNrWDqUNsS","colab_type":"code","outputId":"ac2481b7-ebb4-47b5-a1ef-4404fcd2daf1","executionInfo":{"status":"ok","timestamp":1590050405650,"user_tz":-120,"elapsed":1377,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["X.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(61, 13)"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"z2A0KhEgTXGd","colab_type":"code","outputId":"58883223-e944-431e-82e6-3921977b470b","executionInfo":{"status":"ok","timestamp":1590050409798,"user_tz":-120,"elapsed":4079,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"source":["from sklearn.model_selection import train_test_split\n","    \n","\n","X_train, X_test, y_train, y_test = None, None, None, None\n","X_train, X_test, y_train, y_test= train_test_split(X, y, train_size=50, test_size=11, random_state=0)\n","\n","print( X_train.shape)\n","print( X_test.shape)\n","print( y_train.shape)\n","print( y_test.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["(50, 13)\n","(11, 13)\n","(50, 1)\n","(11, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7jua-cwZUoBC","colab_type":"code","outputId":"cf3cb449-4fca-48b2-968e-cc32c03cc8e8","executionInfo":{"status":"ok","timestamp":1590050412291,"user_tz":-120,"elapsed":416,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["from sklearn.neighbors import KNeighborsRegressor\n","neigh = KNeighborsRegressor(n_neighbors=2)\n","neigh.fit(X_train, y_train)\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n","                    metric_params=None, n_jobs=None, n_neighbors=2, p=2,\n","                    weights='uniform')"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"ZWgHAnXKXWCg","colab_type":"code","outputId":"96ef32b2-5ed4-40d6-d843-7d344b22f9d7","executionInfo":{"status":"ok","timestamp":1590050417734,"user_tz":-120,"elapsed":475,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":208}},"source":["neigh.predict(X_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[2.  ],\n","       [1.5 ],\n","       [1.75],\n","       [3.  ],\n","       [1.25],\n","       [0.75],\n","       [2.75],\n","       [1.5 ],\n","       [2.5 ],\n","       [1.75],\n","       [2.5 ]])"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"dleb11aVVvMm","colab_type":"code","colab":{}},"source":["accuracy = []\n","k = []\n","for i in range (5, 10):\n","  knn = KNeighborsRegressor(n_neighbors = i)\n","  knn.fit(X_train, y_train)\n","  accuracy.append(knn.score(X_test, y_test))\n","  k.append(i)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m-18d7eQWo0s","colab_type":"code","outputId":"ee48f902-57d8-407b-e90d-67b8f6877545","executionInfo":{"status":"ok","timestamp":1590050530953,"user_tz":-120,"elapsed":1207,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":283}},"source":["plt.figure()\n","plt.plot(k, accuracy)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fbee6ad5ef0>]"]},"metadata":{"tags":[]},"execution_count":61},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"YUcYjb37ZTVr","colab_type":"code","outputId":"7cd6d21e-5d2a-48d8-b224-ac23e9e43a50","executionInfo":{"status":"ok","timestamp":1590050553643,"user_tz":-120,"elapsed":614,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["neigh = KNeighborsRegressor(n_neighbors=7)\n","neigh.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsRegressor(algorithm='auto', leaf_size=30, metric='minkowski',\n","                    metric_params=None, n_jobs=None, n_neighbors=7, p=2,\n","                    weights='uniform')"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"VnSrrlpHZfx6","colab_type":"code","outputId":"127ed4d2-420c-471d-b499-e0904777c65d","executionInfo":{"status":"ok","timestamp":1590050598101,"user_tz":-120,"elapsed":994,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["neigh.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6839874411302982"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"qh0OOfWmZmqH","colab_type":"code","outputId":"6aba0c74-3da4-4497-a7c4-5005a0fc9671","executionInfo":{"status":"ok","timestamp":1590050893402,"user_tz":-120,"elapsed":421,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":211}},"source":["from sklearn.svm import SVR\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler\n","regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))\n","regr.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["Pipeline(memory=None,\n","         steps=[('standardscaler',\n","                 StandardScaler(copy=True, with_mean=True, with_std=True)),\n","                ('svr',\n","                 SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.2,\n","                     gamma='scale', kernel='rbf', max_iter=-1, shrinking=True,\n","                     tol=0.001, verbose=False))],\n","         verbose=False)"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"R_S_IzKBavxd","colab_type":"code","outputId":"5dec63b1-33e5-4887-b1af-cc16488c0476","executionInfo":{"status":"ok","timestamp":1590050922305,"user_tz":-120,"elapsed":428,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["regr.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5972975364510339"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"DhLzXjL1a50x","colab_type":"code","outputId":"9964ab43-9ae8-4f9d-cfc0-c79e43d083f2","executionInfo":{"status":"ok","timestamp":1590051413044,"user_tz":-120,"elapsed":445,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["from sklearn.model_selection import cross_val_score\n","from sklearn.tree import DecisionTreeRegressor\n","\n","regressor = DecisionTreeRegressor(random_state=0)\n","regressor.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(ccp_alpha=0.0, criterion='mse', max_depth=None,\n","                      max_features=None, max_leaf_nodes=None,\n","                      min_impurity_decrease=0.0, min_impurity_split=None,\n","                      min_samples_leaf=1, min_samples_split=2,\n","                      min_weight_fraction_leaf=0.0, presort='deprecated',\n","                      random_state=0, splitter='best')"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"id":"Qw0PxsW9bXTo","colab_type":"code","outputId":"e4698d01-b163-4b53-9a66-17d92f29fcdb","executionInfo":{"status":"ok","timestamp":1590051415283,"user_tz":-120,"elapsed":622,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["regressor.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.28076923076923066"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"id":"Qh6ZszbocFHQ","colab_type":"code","outputId":"5a645af3-24b6-4619-bd0a-40c3dee4f75c","executionInfo":{"status":"ok","timestamp":1590051572125,"user_tz":-120,"elapsed":456,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":193}},"source":["from sklearn.ensemble import RandomForestRegressor\n","\n","regr = RandomForestRegressor(max_depth=2, random_state=0)\n","regr.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  after removing the cwd from sys.path.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n","                      max_depth=2, max_features='auto', max_leaf_nodes=None,\n","                      max_samples=None, min_impurity_decrease=0.0,\n","                      min_impurity_split=None, min_samples_leaf=1,\n","                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n","                      n_estimators=100, n_jobs=None, oob_score=False,\n","                      random_state=0, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"code","metadata":{"id":"qOQl34jKdYd6","colab_type":"code","outputId":"782ac69a-a975-496d-c86d-61240e285693","executionInfo":{"status":"ok","timestamp":1590051601418,"user_tz":-120,"elapsed":617,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["regr.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.4445806797802927"]},"metadata":{"tags":[]},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"77xgUU2Tdflt","colab_type":"code","outputId":"daf2632a-d281-45ea-9557-cb73ee42213e","executionInfo":{"status":"ok","timestamp":1590051906672,"user_tz":-120,"elapsed":473,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":141}},"source":["from sklearn.linear_model import BayesianRidge, LinearRegression\n","clf = BayesianRidge()\n","clf.fit(X_train, y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["BayesianRidge(alpha_1=1e-06, alpha_2=1e-06, alpha_init=None,\n","              compute_score=False, copy_X=True, fit_intercept=True,\n","              lambda_1=1e-06, lambda_2=1e-06, lambda_init=None, n_iter=300,\n","              normalize=False, tol=0.001, verbose=False)"]},"metadata":{"tags":[]},"execution_count":78}]},{"cell_type":"code","metadata":{"id":"aHQ-TY3KeqIq","colab_type":"code","outputId":"983ef6c6-429a-4165-894d-d660da81c455","executionInfo":{"status":"ok","timestamp":1590051924755,"user_tz":-120,"elapsed":453,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["clf.score(X_test, y_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5173745202971921"]},"metadata":{"tags":[]},"execution_count":79}]},{"cell_type":"code","metadata":{"id":"VeKhJpEoeuke","colab_type":"code","outputId":"2f278e89-5e0d-4319-897f-87d0ba709ec0","executionInfo":{"status":"ok","timestamp":1590051996066,"user_tz":-120,"elapsed":436,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"source":["clf.predict(X_test)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2.0426655 , 1.80998698, 1.8639433 , 2.18292704, 1.6742282 ,\n","       1.30015843, 2.27734518, 1.46955768, 2.19567637, 1.86900366,\n","       2.10049515])"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"SyeMyeTZe_-Z","colab_type":"code","outputId":"1d0cd507-9629-4aa5-c4cf-1231e839722e","executionInfo":{"status":"ok","timestamp":1590052014014,"user_tz":-120,"elapsed":439,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":386}},"source":["y_test"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NOTE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>26</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>2.5</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>0.5</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    NOTE\n","26   2.0\n","35   2.0\n","60   2.5\n","28   2.0\n","11   1.5\n","2    1.0\n","34   3.0\n","59   0.5\n","40   3.0\n","22   1.5\n","4    2.0"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"IjJ86qBXfEXR","colab_type":"code","colab":{}},"source":["def round_of_rating(number):\n","        return round(number * 2) / 2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2vOuPy5df14U","colab_type":"code","outputId":"6156a192-8696-4cee-9dac-aa4e8db7d55c","executionInfo":{"status":"ok","timestamp":1590052406096,"user_tz":-120,"elapsed":419,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":208}},"source":["for i in clf.predict(X_test):\n","  print(round_of_rating(i))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2.0\n","2.0\n","2.0\n","2.0\n","1.5\n","1.5\n","2.5\n","1.5\n","2.0\n","2.0\n","2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BEZFvGyLgDgX","colab_type":"code","colab":{}},"source":["def euclidean_score(X_test, y_test):\n","  result = 0\n","  X_pred = clf.predict(X_test)\n","  for i in range(len(y_test)):\n","    result += np.linalg.norm(round_of_rating(X_pred[i])-y_test[i])\n","  return(result/len(y_test))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"x8yBx7egho2W","colab_type":"code","outputId":"407c341a-e80d-402a-a365-539deb9c850f","executionInfo":{"status":"ok","timestamp":1590053076742,"user_tz":-120,"elapsed":478,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["euclidean_score(X_test, np.asarray(y_test))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.36363636363636365"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"code","metadata":{"id":"AyHQzLqXh9_d","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}