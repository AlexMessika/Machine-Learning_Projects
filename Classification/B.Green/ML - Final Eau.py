{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML - Final Eau.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOwKXcFOuLb/+NiNC3Ahd3n"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"sEDT9kv6KvJl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":107},"outputId":"8293d17d-a40e-4aa0-ef87-beb3ec0a76f2","executionInfo":{"status":"ok","timestamp":1590504494859,"user_tz":-120,"elapsed":860,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}}},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_breast_cancer\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.externals import joblib \n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n","/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"2Sw0OME6KW6C","colab_type":"code","outputId":"60b1550a-d3c7-4998-aa89-11d3795ac600","executionInfo":{"status":"ok","timestamp":1590504494861,"user_tz":-120,"elapsed":804,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"colab":{"base_uri":"https://localhost:8080/","height":208}},"source":["f = open(\"depot.txt\", \"r\")\n","string = f.read()\n","string = string[:-1]\n","tab = string.split(\";\")\n","tab"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['3foisdent',\n"," 'none',\n"," 'none',\n"," 'sentir',\n"," 'none',\n"," 'none',\n"," '7douche',\n"," 'none',\n"," 'none',\n"," '30tempslavermains',\n"," 'couperrobinet']"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"FpgMUrItKZj9","colab_type":"code","colab":{}},"source":["def convert_one(x):\n","  if x == \"0-1dent\": return 1\n","  if x == \"2foisdent\": return 2\n","  if x == \"3foisdent\": return 3\n","  if x == \"plus3foisdent\": return 4\n","  else: return 0\n","\n","def convert_two(x):\n","  if x == \"ouilaver\": return 1\n","  if x == \"Nonabime\": return 2\n","  if x == \"Noneau\": return 3\n","  if x == \"Nonefficace\": return 4\n","  else: return 0\n","\n","def convert_three(x):\n","  if x == \"0-1lessive\": return 1\n","  if x == \"2-3lessive\": return 2\n","  if x == \"plus3lessive\": return 3\n","  else: return 0\n","\n","def convert_four(x):\n","  if x == \"sentir\": return 1\n","  if x == \"propre\": return 2\n","  if x == \"maladie\": return 3\n","  else: return 0\n","\n","def convert_five(x):\n","  if x == \"journalier\": return 1\n","  if x == \"ponctuel\": return 2\n","  else: return 0\n","\n","def convert_six(x):\n","  if x == \"Bouteille\": return 1\n","  if x == \"Robinet\": return 2\n","  if x == \"bouteilleRobinet\": return 3\n","  else: return 0\n","\n","def convert_seven(x):\n","  if x == \"moins3douche\": return 1\n","  if x == \"3a6douche\": return 2\n","  if x == \"7douche\": return 3\n","  if x == \"plus7douche\": return 4\n","  else: return 0\n","\n","def convert_eight(x):\n","  if x == \"moins5tempsdouche\": return 1\n","  if x == \"5a10tempsdouche\": return 2\n","  if x == \"plus10tempsdouche\": return 3\n","  else: return 0\n","\n","def convert_nine(x):\n","  if x == \"0a1lavermains\": return 1\n","  if x == \"2a3lavermain\": return 2\n","  if x == \"plus3lavermain\": return 3\n","  else: return 0\n","\n","def convert_ten(x):\n","  if x == \"30tempslavermains\": return 1\n","  if x == \"1a2tempslavermain\": return 2\n","  if x == \"plus2tempslavermain\": return 3\n","  else: return 0\n","\n","def convert_eleven(x):\n","  if x == \"couperrobine\": return 1\n","  if x == \"couperdouch\": return 2\n","  if x == \"recupea\": return 3\n","  else: return 0\n","\n","tab[0] = convert_one(tab[0])\n","tab[1] = convert_two(tab[1])\n","tab[2] = convert_three(tab[2])\n","tab[3] = convert_four(tab[3])\n","tab[4] = convert_five(tab[4])\n","tab[5] = convert_six(tab[5])\n","tab[6] = convert_seven(tab[6])\n","tab[7] = convert_eight(tab[7])\n","tab[8] = convert_nine(tab[8])\n","tab[9] = convert_ten(tab[9])\n","tab[10] = convert_eleven(tab[10])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"A8XwWICiWZpv","colab_type":"code","colab":{}},"source":["tab = [tab]\n","Tab = np.asarray(tab)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lkWSZkzHeaX8","colab_type":"code","colab":{}},"source":["knn_from_joblib = joblib.load('Model_eau.pkl')  \n","note = knn_from_joblib.predict(Tab) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2e618k_7Kd8g","colab_type":"code","colab":{}},"source":["if note < 0 : note = 0\n","if note > 4 : note = 4\n","text_file = open(\"retour.txt\", \"w\")\n","n = text_file.write(str(note[0][0]))\n","text_file.close()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"r_KvsoWnKhNT","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}