{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML - Final Transport.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNTI6EjYpQKiwcDsqXyYa8s"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"WkiuewaRoUee","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1590256823941,"user_tz":-120,"elapsed":855,"user":{"displayName":"alexandre messika","photoUrl":"","userId":"06329052339187445104"}},"outputId":"80a2f292-fd8a-4d51-bd2c-6a428681e2f3"},"source":["import numpy as np\n","import pandas as pd\n","from sklearn.datasets import load_breast_cancer\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.externals import joblib "],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n","/usr/local/lib/python3.6/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"r63JlVNbqJBG"},"source":["f = open(\"depot.txt\", \"r\")\n","string = f.read()\n","string = string[:-1]\n","tab = string.split(\";\")\n","tab"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O0d9L_zNqPXa"},"source":["def convert_one(x):\n","  if x == \"urbaine\": return 1\n","  if x == \"rurale\": return 2\n","  else: return 0\n","\n","def convert_two(x):\n","  if x == \"moins10tempstrajet\": return 1\n","  if x == \"10a30tempstrajet\": return 2\n","  if x == \"30a1tempstrajet\": return 3\n","  if x == \"1a2tempstrajet\": return 4\n","  if x == \"plus2tempstrajet\": return 5\n","  else: return 0\n","\n","def convert_three(x):\n","  if x == \"piedstransport\": return 1\n","  if x == \"velotransport\": return 2\n","  if x == \"communtransport\": return 3\n","  if x == \"Covoituragetransport\": return 4\n","  if x == \"voituretransport\": return 5\n","  if x == \"taxitransport\": return 6\n","  else: return 0\n","\n","def convert_four(x):\n","  if x == \"ouivoiture\": return 1\n","  if x == \"nonvoiture\": return 2\n","  if x == \"pasvoiture\": return 3\n","  else: return 0\n","\n","def convert_five(x):\n","  if x == \"toustransportcommun\": return 1\n","  if x == \"quelquetransportcommun\": return 2\n","  if x == \"moistransportcommun\": return 3\n","  if x == \"jamaistransportcommun\": return 4\n","  else: return 0\n","\n","def convert_six(x):\n","  if x == \"tousfrequencevehicule\": return 1\n","  if x == \"quelquefrequencevehicule\": return 2\n","  if x == \"moisfrequencevehicule\": return 3\n","  if x == \"jamaisfrequencevehicule\": return 4\n","  if x == \"pasfrequencevehicule\": return 5\n","  else: return 0\n","\n","def convert_seven(x):\n","  if x == \"traintrajet\": return 1\n","  if x == \"aviontrajet\": return 2\n","  if x == \"aucuntrajet\": return 3\n","  else: return 0\n","\n","tab[0] = convert_one(tab[0])\n","tab[1] = convert_two(tab[1])\n","tab[2] = convert_three(tab[2])\n","tab[3] = convert_four(tab[3])\n","tab[4] = convert_five(tab[4])\n","tab[5] = convert_six(tab[5])\n","tab[6] = convert_seven(tab[6])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rMKpHs_frnMK"},"source":["tab = [tab]\n","Tab = np.asarray(tab)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zSxs7E6jr12_"},"source":["knn_from_joblib = joblib.load('Model_transport.pkl')  \n","note = knn_from_joblib.predict(Tab) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S6RXdeXyr3tx"},"source":["if note < 0 : note = 0\n","if note > 4 : note = 4\n","text_file = open(\"retour.txt\", \"w\")\n","n = text_file.write(str(note[0][0]))\n","text_file.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rAxKiuIesjx1"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6jNfwxjvr5f7"},"source":[""],"execution_count":null,"outputs":[]}]}